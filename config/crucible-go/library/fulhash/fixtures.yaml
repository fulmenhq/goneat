$schema: https://schemas.fulmenhq.dev/library/fulhash/v1.0.0/fixtures.schema.json
version: 1.0.0
description: Known-value test fixtures for FulHash implementations to ensure cross-language parity
fixtures:
  - name: empty-input
    description: Zero-length input
    input: ''
    encoding: utf-8
    input_bytes: []
    xxh3_128: xxh3-128:99aa06d3014798d86001c324468d497f
    sha256: sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
  - name: hello-world
    description: Simple ASCII string
    input: Hello, World!
    encoding: utf-8
    input_bytes:
      - 72
      - 101
      - 108
      - 108
      - 111
      - 44
      - 32
      - 87
      - 111
      - 114
      - 108
      - 100
      - 33
    xxh3_128: xxh3-128:531df2844447dd5077db03842cd75395
    sha256: sha256:dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f
    notes: Standard test for basic functionality
  - name: single-byte
    description: Single byte input
    input: A
    encoding: utf-8
    input_bytes:
      - 65
    xxh3_128: xxh3-128:9b0498cbe3839becd0d496e05c553485
    sha256: sha256:559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd
  - name: unicode-emoji
    description: Unicode emoji and multi-byte characters
    input: Hello ðŸ”¥ World
    encoding: utf-8
    input_bytes:
      - 72
      - 101
      - 108
      - 108
      - 111
      - 32
      - 240
      - 159
      - 148
      - 165
      - 32
      - 87
      - 111
      - 114
      - 108
      - 100
    xxh3_128: xxh3-128:0791d45904cb439cf2b54f3c99d7d016
    sha256: sha256:f0eea4a27f4b360ceb33767e11b15297c9b8f35bedeac965ca2383b5909c5311
    notes: Validates UTF-8 handling of multi-byte sequences
  - name: lorem-ipsum
    description: Longer text block
    input: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    encoding: utf-8
    xxh3_128: xxh3-128:11d2c0487e40a970896d55d440aa4917
    sha256: sha256:973153f86ec2da1748e63f0cf85b89835b42f8ee8018c549868a1308a19f6ca3
    notes: Tests hashing of moderate-length text
  - name: binary-sequence
    description: Sequence simulating binary data
    input_bytes:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 255
      - 254
      - 253
      - 252
      - 251
      - 250
    encoding: bytes
    xxh3_128: xxh3-128:20ca9b198949b89656c23cc8634b6f33
    sha256: sha256:8b56882080ed626ce3b3a1e036c00b8b60ba4d7d7cd7fb32688d3425a0233c49
    notes: Validates handling of non-text byte sequences
streaming_fixtures:
  - name: streaming-hello-world
    description: Multi-chunk streaming validation
    chunks:
      - value: 'Hello, '
        encoding: utf-8
      - value: World!
        encoding: utf-8
    expected_xxh3_128: xxh3-128:531df2844447dd5077db03842cd75395
    expected_sha256: sha256:dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f
    notes: Should match hello-world fixture when streamed
  - name: streaming-large-chunks
    description: Simulates large file streaming with 4KB chunks
    chunks:
      - size: 4096
        pattern: repeating-A
      - size: 4096
        pattern: repeating-B
      - size: 4096
        pattern: repeating-C
    expected_xxh3_128: xxh3-128:a16308c617779141ed50ae99d9bca18b
    expected_sha256: sha256:be9b10a62c2e9197f2b46195cc6f3944b0707391049c10fbf6287d9eaf710f10
    notes: Performance and streaming correctness test
error_fixtures:
  - name: unsupported-algorithm
    input: test
    algorithm: md5
    expected_error: UnsupportedAlgorithmError
    error_message_contains:
      - md5
      - supported algorithms
      - xxh3-128
      - sha256
  - name: invalid-checksum-format
    checksum: invalid-no-separator
    expected_error: InvalidChecksumFormatError
    error_message_contains:
      - expected format
      - algorithm:hex
  - name: invalid-checksum-algorithm
    checksum: unknown:abc123
    expected_error: UnsupportedAlgorithmError
    error_message_contains:
      - unknown
      - supported algorithms
format_fixtures:
  - name: format-xxh3
    algorithm: xxh3-128
    hex: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6
    expected_formatted: xxh3-128:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6
  - name: format-sha256
    algorithm: sha256
    hex: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    expected_formatted: sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
  - name: parse-xxh3
    formatted: xxh3-128:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6
    expected_algorithm: xxh3-128
    expected_hex: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6
  - name: parse-sha256
    formatted: sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    expected_algorithm: sha256
    expected_hex: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
# Notes for implementers
notes: |
  1. All hex values MUST be lowercase
  2. Empty input is a valid test case - ensure your implementation handles it
  3. Streaming chunks should produce identical results to block hashing
  4. xxh3-128 values computed using xxhash v3.6.0 (Python reference implementation)
  5. Cross-language validation: all implementations MUST produce identical outputs for these fixtures
  6. Unicode normalization: UTF-8 encoding is canonical; implementations must not perform additional normalization
